# TORONTO AI TEAM AGENT - PROPRIETARY
#
# Copyright (c) 2025 TORONTO AI
# Creator: David Tadeusz Chudak
# All Rights Reserved
#
# This file is part of the TORONTO AI TEAM AGENT software.
#
# This software is based on OpenManus (Copyright (c) 2025 manna_and_poem),
# which is licensed under the MIT License. The original license is included
# in the LICENSE file in the root directory of this project.
#
# This software has been substantially modified with proprietary enhancements.

"""
Application Entry Point

This module serves as the main entry point for the TORONTO AI TEAM AGENT application.
It initializes the application, sets up logging, and starts the main execution flow.
"""

import os
import sys
import logging
import argparse
import json
from pathlib import Path

from app.core.bootstrap import bootstrap_application

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('toronto_ai_team_agent.log')
    ]
)
logger = logging.getLogger(__name__)

def load_config(config_path=None):
    """
    Load application configuration from file.
    
    Args:
        config_path: Path to configuration file
        
    Returns:
        Application configuration
    """
    # Default config path
    if not config_path:
        config_path = os.path.join(os.path.dirname(__file__), 'config', 'app_config.json')
    
    # Check if config file exists
    if not os.path.exists(config_path):
        logger.warning(f"Configuration file not found: {config_path}")
        return {}
    
    # Load config from file
    try:
        with open(config_path, 'r') as f:
            config = json.load(f)
        logger.info(f"Loaded configuration from {config_path}")
        return config
    except Exception as e:
        logger.error(f"Error loading configuration: {str(e)}")
        return {}

def main():
    """
    Main entry point.
    """
    # Parse command line arguments
    parser = argparse.ArgumentParser(description="TORONTO AI TEAM AGENT")
    parser.add_argument("--config", type=str, help="Path to configuration file")
    args = parser.parse_args()
    
    # Load configuration
    config = load_config(args.config)
    
    # Bootstrap application
    container = bootstrap_application(config)
    
    # TODO: Start application execution flow
    logger.info("TORONTO AI TEAM AGENT started")
    
    # Example: Resolve and use a service
    try:
        from app.agent.project_manager.services.reporting import ReportingService
        reporting_service = container.resolve(ReportingService)
        logger.info("Successfully resolved ReportingService from container")
    except Exception as e:
        logger.error(f"Error resolving service: {str(e)}")

if __name__ == "__main__":
    main()
