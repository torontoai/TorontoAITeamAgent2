# TORONTO AI TEAM AGENT - PROPRIETARY
#
# Copyright (c) 2025 TORONTO AI
# Creator: David Tadeusz Chudak
# All Rights Reserved
#
# This file is part of the TORONTO AI TEAM AGENT software.
#
# This software is based on OpenManus (Copyright (c) 2025 manna_and_poem),
# which is licensed under the MIT License. The original license is included
# in the LICENSE file in the root directory of this project.
#
# This software has been substantially modified with proprietary enhancements.

"""
Configuration Module

This module provides utilities for loading and managing application configuration.
"""

import os
import json
import logging
import yaml
from typing import Dict, Any, Optional

logger = logging.getLogger(__name__)

class ConfigurationManager:
    """
    Configuration Manager for loading and accessing application configuration.
    
    This class provides methods for loading configuration from various sources
    and accessing configuration values with default fallbacks.
    """
    
    def __init__(self, config_dir: str = None):
        """
        Initialize the configuration manager.
        
        Args:
            config_dir: Directory containing configuration files
        """
        self.config_dir = config_dir or os.path.join(os.path.dirname(__file__), '..', 'config')
        self.config = {}
        logger.debug(f"Initialized ConfigurationManager with config_dir: {self.config_dir}")
    
    def load_config(self, config_path: str = None, env_prefix: str = "TORONTO_") -> Dict[str, Any]:
        """
        Load configuration from file and environment variables.
        
        Args:
            config_path: Path to configuration file
            env_prefix: Prefix for environment variables
            
        Returns:
            Loaded configuration
        """
        # Default config path
        if not config_path:
            config_path = os.path.join(self.config_dir, 'app_config.json')
        
        # Load from file
        self.config = self._load_from_file(config_path)
        
        # Override with environment variables
        self._load_from_env(env_prefix)
        
        logger.info(f"Loaded configuration with {len(self.config)} keys")
        return self.config
    
    def _load_from_file(self, config_path: str) -> Dict[str, Any]:
        """
        Load configuration from file.
        
        Args:
            config_path: Path to configuration file
            
        Returns:
            Loaded configuration
        """
        # Check if config file exists
        if not os.path.exists(config_path):
            logger.warning(f"Configuration file not found: {config_path}")
            return {}
        
        # Load config from file
        try:
            file_extension = os.path.splitext(config_path)[1].lower()
            
            if file_extension == '.json':
                with open(config_path, 'r') as f:
                    config = json.load(f)
            elif file_extension in ['.yaml', '.yml']:
                with open(config_path, 'r') as f:
                    config = yaml.safe_load(f)
            else:
                logger.warning(f"Unsupported configuration file format: {file_extension}")
                return {}
            
            logger.info(f"Loaded configuration from {config_path}")
            return config
        except Exception as e:
            logger.error(f"Error loading configuration from {config_path}: {str(e)}")
            return {}
    
    def _load_from_env(self, prefix: str) -> None:
        """
        Load configuration from environment variables.
        
        Args:
            prefix: Prefix for environment variables
        """
        # Get all environment variables with the specified prefix
        env_vars = {k: v for k, v in os.environ.items() if k.startswith(prefix)}
        
        # Process environment variables
        for key, value in env_vars.items():
            # Remove prefix and convert to lowercase
            config_key = key[len(prefix):].lower()
            
            # Split by double underscore to create nested keys
            parts = config_key.split('__')
            
            # Navigate to the correct level in the config
            current = self.config
            for part in parts[:-1]:
                if part not in current:
                    current[part] = {}
                current = current[part]
            
            # Set the value
            current[parts[-1]] = self._convert_value(value)
        
        if env_vars:
            logger.info(f"Loaded {len(env_vars)} configuration values from environment variables")
    
    def _convert_value(self, value: str) -> Any:
        """
        Convert string value to appropriate type.
        
        Args:
            value: String value
            
        Returns:
            Converted value
        """
        # Try to convert to appropriate type
        if value.lower() == 'true':
            return True
        elif value.lower() == 'false':
            return False
        elif value.lower() == 'null' or value.lower() == 'none':
            return None
        
        # Try to convert to number
        try:
            if '.' in value:
                return float(value)
            else:
                return int(value)
        except ValueError:
            # Keep as string
            return value
    
    def get(self, key: str, default: Any = None) -> Any:
        """
        Get a configuration value.
        
        Args:
            key: Configuration key (dot notation for nested keys)
            default: Default value if key not found
            
        Returns:
            Configuration value
        """
        # Split key by dots
        parts = key.split('.')
        
        # Navigate to the correct level in the config
        current = self.config
        for part in parts:
            if part not in current:
                return default
            current = current[part]
        
        return current
    
    def set(self, key: str, value: Any) -> None:
        """
        Set a configuration value.
        
        Args:
            key: Configuration key (dot notation for nested keys)
            value: Configuration value
        """
        # Split key by dots
        parts = key.split('.')
        
        # Navigate to the correct level in the config
        current = self.config
        for part in parts[:-1]:
            if part not in current:
                current[part] = {}
            current = current[part]
        
        # Set the value
        current[parts[-1]] = value
        
        logger.debug(f"Set configuration value for {key}")
    
    def get_all(self) -> Dict[str, Any]:
        """
        Get all configuration values.
        
        Returns:
            All configuration values
        """
        return self.config.copy()


# Global configuration manager instance
config_manager = ConfigurationManager()

def get_config_manager() -> ConfigurationManager:
    """
    Get the global configuration manager.
    
    Returns:
        Global configuration manager
    """
    return config_manager
