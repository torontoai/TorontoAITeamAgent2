# TORONTO AI TEAM AGENT - PROPRIETARY
#
# Copyright (c) 2025 TORONTO AI
# Creator: David Tadeusz Chudak
# All Rights Reserved
#
# This file is part of the TORONTO AI TEAM AGENT software.
#
# This software is based on OpenManus (Copyright (c) 2025 manna_and_poem),
# which is licensed under the MIT License. The original license is included
# in the LICENSE file in the root directory of this project.
#
# This software has been substantially modified with proprietary enhancements.


"""
API Integration Configuration System for TORONTO AI Team Agent Team AI.

This module provides a comprehensive configuration system for managing API integrations
with various AI services (OpenAI, Claude, DeepSeek, etc.) and other external tools.
"""

from typing import Dict, Any, List, Optional, Union
import logging
import os
import json
import uuid
import datetime
import hashlib
import re
import requests
from enum import Enum

logger = logging.getLogger(__name__)

class ApiProvider(Enum):
    """Enumeration of supported API providers."""
    OPENAI = "openai"
    ANTHROPIC = "anthropic"
    DEEPSEEK = "deepseek"
    GOOGLE = "google"
    COHERE = "cohere"
    HUGGINGFACE = "huggingface"
    AZURE_OPENAI = "azure_openai"
    GITHUB = "github"
    JIRA = "jira"
    SLACK = "slack"
    CUSTOM = "custom"


class ApiIntegrationManager:
    """
    API Integration Manager for handling external API connections.
    
    This class provides functionality for managing API keys, testing connections,
    and providing configured clients for various services.
    """
    
    def __init__(self, config_path: str = None):
        """
        Initialize the API Integration Manager.
        
        Args:
            config_path: Path to the API configuration file
        """
        self.config_path = config_path or os.environ.get(
            "OPENMANUS_API_CONFIG", 
            os.path.join(os.path.expanduser("~"), ".toronto-ai-team-agent", "api_config.json")
        )
        
        # Ensure config directory exists
        os.makedirs(os.path.dirname(self.config_path), exist_ok=True)
        
        # Load configuration
        self.config = self._load_config()
        
        # Initialize provider clients
        self._clients = {}
        
        logger.info(f"API Integration Manager initialized with config at {self.config_path}")
    
    def configure_api(self, params: Dict[str, Any]) -> Dict[str, Any]:
        """
        Configure an API integration.
        
        Args:
            params: Configuration parameters including provider, api_key, and additional settings
            
        Returns:
            Configuration result
        """
        provider = params.get("provider")
        api_key = params.get("api_key")
        settings = params.get("settings", {})
        
        if not provider:
            return {
                "success": False,
                "message": "Provider is required"
            }
        
        if not api_key and provider != ApiProvider.CUSTOM.value:
            return {
                "success": False,
                "message": "API key is required"
            }
        
        # Validate provider
        try:
            provider_enum = ApiProvider(provider)
        except ValueError:
            return {
                "success": False,
                "message": f"Unsupported provider: {provider}. Supported providers: {', '.join([p.value for p in ApiProvider])}"
            }
        
        # Create configuration
        config_id = self._generate_config_id(provider)
        
        config_data = {
            "provider": provider,
            "api_key": self._encrypt_api_key(api_key) if api_key else None,
            "settings": settings,
            "created_at": datetime.datetime.now().isoformat(),
            "updated_at": datetime.datetime.now().isoformat(),
            "status": "configured"
        }
        
        # Save configuration
        self.config[config_id] = config_data
        self._save_config()
        
        # Clear client cache
        if provider in self._clients:
            del self._clients[provider]
        
        logger.info(f"Configured API integration for provider {provider}")
        
        return {
            "success": True,
            "message": f"Successfully configured API integration for provider {provider}",
            "config_id": config_id
        }
    
    def test_api_connection(self, params: Dict[str, Any]) -> Dict[str, Any]:
        """
        Test an API connection.
        
        Args:
            params: Test parameters including provider or config_id
            
        Returns:
            Test result
        """
        provider = params.get("provider")
        config_id = params.get("config_id")
        
        if not provider and not config_id:
            return {
                "success": False,
                "message": "Provider or config_id is required"
            }
        
        # Get configuration
        if config_id:
            if config_id not in self.config:
                return {
                    "success": False,
                    "message": f"Configuration not found: {config_id}"
                }
            
            config_data = self.config[config_id]
            provider = config_data.get("provider")
        else:
            # Find configuration for provider
            config_data = None
            
            for cid, cdata in self.config.items():
                if cdata.get("provider") == provider:
                    config_data = cdata
                    config_id = cid
                    break
            
            if not config_data:
                return {
                    "success": False,
                    "message": f"No configuration found for provider: {provider}"
                }
        
        # Test connection
        try:
            result = self._test_provider_connection(provider, config_data)
            
            # Update status
            if result["success"]:
                self.config[config_id]["status"] = "active"
                self.config[config_id]["last_tested"] = datetime.datetime.now().isoformat()
                self.config[config_id]["test_result"] = "success"
            else:
                self.config[config_id]["status"] = "error"
                self.config[config_id]["last_tested"] = datetime.datetime.now().isoformat()
                self.config[config_id]["test_result"] = "failure"
                self.config[config_id]["error_message"] = result["message"]
            
            self._save_config()
            
            return result
        
        except Exception as e:
            logger.error(f"Error testing connection for provider {provider}: {str(e)}")
            
            # Update status
            self.config[config_id]["status"] = "error"
            self.config[config_id]["last_tested"] = datetime.datetime.now().isoformat()
            self.config[config_id]["test_result"] = "failure"
            self.config[config_id]["error_message"] = str(e)
            
            self._save_config()
            
            return {
                "success": False,
                "message": f"Error testing connection: {str(e)}"
            }
    
    def get_api_client(self, params: Dict[str, Any]) -> Dict[str, Any]:
        """
        Get an API client for a provider.
        
        Args:
            params: Client parameters including provider
            
        Returns:
            API client
        """
        provider = params.get("provider")
        
        if not provider:
            return {
                "success": False,
                "message": "Provider is required"
            }
        
        # Find configuration for provider
        config_data = None
        
        for cid, cdata in self.config.items():
            if cdata.get("provider") == provider and cdata.get("status") != "error":
                config_data = cdata
                break
        
        if not config_data:
            return {
                "success": False,
                "message": f"No active configuration found for provider: {provider}"
            }
        
        # Get client
        try:
            client = self._get_provider_client(provider, config_data)
            
            return {
                "success": True,
                "message": f"Successfully retrieved client for provider {provider}",
                "client": client
            }
        
        except Exception as e:
            logger.error(f"Error getting client for provider {provider}: {str(e)}")
            
            return {
                "success": False,
                "message": f"Error getting client: {str(e)}"
            }
    
    def list_api_configurations(self, params: Dict[str, Any] = None) -> Dict[str, Any]:
        """
        List all API configurations.
        
        Args:
            params: Query parameters including provider and status
            
        Returns:
            List of API configurations
        """
        params = params or {}
        provider = params.get("provider")
        status = params.get("status")
        
        # Filter configurations
        filtered_configs = {}
        
        for config_id, config_data in self.config.items():
            if provider and config_data.get("provider") != provider:
                continue
            
            if status and config_data.get("status") != status:
                continue
            
            # Create a safe copy without the API key
            safe_config = {k: v for k, v in config_data.items() if k != "api_key"}
            safe_config["has_key"] = config_data.get("api_key") is not None
            
            filtered_configs[config_id] = safe_config
        
        return {
            "success": True,
            "message": f"Found {len(filtered_configs)} API configurations",
            "configurations": filtered_configs
        }
    
    def delete_api_configuration(self, params: Dict[str, Any]) -> Dict[str, Any]:
        """
        Delete an API configuration.
        
        Args:
            params: Deletion parameters including config_id
            
        Returns:
            Deletion result
        """
        config_id = params.get("config_id")
        
        if not config_id:
            return {
                "success": False,
                "message": "Configuration ID is required"
            }
        
        # Check if configuration exists
        if config_id not in self.config:
            return {
                "success": False,
                "message": f"Configuration not found: {config_id}"
            }
        
        # Get provider
        provider = self.config[config_id].get("provider")
        
        # Delete configuration
        del self.config[config_id]
        self._save_config()
        
        # Clear client cache
        if provider in self._clients:
            del self._clients[provider]
        
        logger.info(f"Deleted API configuration: {config_id}")
        
        return {
            "success": True,
            "message": f"Successfully deleted API configuration: {config_id}"
        }
    
    def _load_config(self) -> Dict[str, Any]:
        """
        Load the API configuration.
        
        Returns:
            API configuration
        """
        if os.path.exists(self.config_path):
            try:
                with open(self.config_path, "r") as f:
                    return json.load(f)
            except Exception as e:
                logger.error(f"Error loading API configuration: {str(e)}")
                return {}
        else:
            return {}
    
    def _save_config(self) -> None:
        """
        Save the API configuration.
        """
        try:
            with open(self.config_path, "w") as f:
                json.dump(self.config, f, indent=2)
        except Exception as e:
            logger.error(f"Error saving API configuration: {str(e)}")
    
    def _generate_config_id(self, provider: str) -> str:
        """
        Generate a unique configuration ID.
        
        Args:
            provider: API provider
            
        Returns:
            Configuration ID
        """
        timestamp = datetime.datetime.now().isoformat()
        unique_string = f"{provider}_{timestamp}_{uuid.uuid4().hex}"
        return f"api_{hashlib.md5(unique_string.encode()).hexdigest()[:12]}"
    
    def _encrypt_api_key(self, api_key: str) -> str:
        """
        Encrypt an API key.
        
        Args:
            api_key: API key
            
        Returns:
            Encrypted API key
        """
        # In a real implementation, this would use proper encryption
        # For now, just return a masked version for demonstration
        if not api_key:
            return None
        
        # Keep first 4 and last 4 characters, mask the rest
        if len(api_key) <= 8:
            return "*" * len(api_key)
        else:
            return api_key[:4] + "*" * (len(api_key) - 8) + api_key[-4:]
    
    def _decrypt_api_key(self, encrypted_key: str) -> str:
        """
        Decrypt an API key.
        
        Args:
            encrypted_key: Encrypted API key
            
        Returns:
            Decrypted API key
        """
        # In a real implementation, this would use proper decryption
        # For now, just return the encrypted key for demonstration
        return encrypted_key
    
    def _test_provider_connection(self, provider: str, config_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Test a provider connection.
        
        Args:
            provider: API provider
            config_data: Provider configuration
            
        Returns:
            Test result
        """
        # Simulate connection test for different providers
        if provider == ApiProvider.OPENAI.value:
            return self._test_openai_connection(config_data)
        elif provider == ApiProvider.ANTHROPIC.value:
            return self._test_anthropic_connection(config_data)
        elif provider == ApiProvider.DEEPSEEK.value:
            return self._test_deepseek_connection(config_data)
        elif provider == ApiProvider.GOOGLE.value:
            return self._test_google_connection(config_data)
        elif provider == ApiProvider.COHERE.value:
            return self._test_cohere_connection(config_data)
        elif provider == ApiProvider.HUGGINGFACE.value:
            return self._test_huggingface_connection(config_data)
        elif provider == ApiProvider.AZURE_OPENAI.value:
            return self._test_azure_openai_connection(config_data)
        elif provider == ApiProvider.GITHUB.value:
            return self._test_github_connection(config_data)
        elif provider == ApiProvider.JIRA.value:
            return self._test_jira_connection(config_data)
        elif provider == ApiProvider.SLACK.value:
            return self._test_slack_connection(config_data)
        elif provider == ApiProvider.CUSTOM.value:
            return self._test_custom_connection(config_data)
        else:
            return {
                "success": False,
                "message": f"Unsupported provider: {provider}"
            }
    
    def _get_provider_client(self, provider: str, config_data: Dict[str, Any]) -> Any:
        """
        Get a provider client.
        
        Args:
            provider: API provider
            config_data: Provider configuration
            
        Returns:
            Provider client
        """
        # Check if client is already cached
        if provider in self._clients:
            return self._clients[provider]
        
        # Create client for different providers
        if provider == ApiProvider.OPENAI.value:
            client = self._create_openai_client(config_data)
        elif provider == ApiProvider.ANTHROPIC.value:
            client = self._create_anthropic_client(config_data)
        elif provider == ApiProvider.DEEPSEEK.value:
            client = self._create_deepseek_client(config_data)
        elif provider == ApiProvider.GOOGLE.value:
            client = self._create_google_client(config_data)
        elif provider == ApiProvider.COHERE.value:
            client = self._create_cohere_client(config_data)
        elif provider == ApiProvider.HUGGINGFACE.value:
            client = self._create_huggingface_client(config_data)
        elif provider == ApiProvider.AZURE_OPENAI.value:
            client = self._create_azure_openai_client(config_data)
        elif provider == ApiProvider.GITHUB.value:
            client = self._create_github_client(config_data)
        elif provider == ApiProvider.JIRA.value:
            client = self._create_jira_client(config_data)
        elif provider == ApiProvider.SLACK.value:
            client = self._create_slack_client(config_data)
        elif provider == ApiProvider.CUSTOM.value:
            client = self._create_custom_client(config_data)
        else:
            raise ValueError(f"Unsupported provider: {provider}")
        
        # Cache client
        self._clients[provider] = client
        
        return client
    
    # Provider-specific test methods
    
    def _test_openai_connection(self, config_data: Dict[str, Any]) -> Dict[str, Any]:
        """Test OpenAI connection."""
        try:
            # In a real implementation, this would use the OpenAI API
            # For now, simulate a successful connection
            return {
                "success": True,
                "message": "Successfully connected to OpenAI API",
                "models": ["gpt-4", "gpt-3.5-turbo"]
            }
        except Exception as e:
            return {
                "success": False,
                "message": f"Error connecting to OpenAI API: {str(e)}"
            }
    
    def _test_anthropic_connection(self, config_data: Dict[str, Any]) -> Dict[str, Any]:
        """Test Anthropic connection."""
        try:
            # In a real implementation, this would use the Anthropic API
            # For now, simulate a successful connection
            return {
                "success": True,
                "message": "Successfully connected to Anthropic API",
                "models": ["claude-3-opus", "claude-3-sonnet", "claude-3-haiku"]
            }
        except Exception as e:
            return {
                "success": False,
                "message": f"Error connecting to Anthropic API: {str(e)}"
            }
    
    def _test_deepseek_connection(self, config_data: Dict[str, Any]) -> Dict[str, Any]:
        """Test DeepSeek connection."""
        try:
            # In a real implementation, this would use the DeepSeek API
            # For now, simulate a successful connection
            return {
                "success": True,
                "message": "Successfully connected to DeepSeek API",
                "models": ["deepseek-coder", "deepseek-chat"]
            }
        except Exception as e:
            return {
                "success": False,
                "message": f"Error connecting to DeepSeek API: {str(e)}"
            }
    
    def _test_google_connection(self, config_data: Dict[str, Any]) -> Dict[str, Any]:
        """Test Google connection."""
        try:
            # In a real implementation, this would use the Google API
            # For now, simulate a successful connection
            return {
                "success": True,
                "message": "Successfully connected to Google API",
                "models": ["gemini-pro", "gemini-pro-vision"]
            }
        except Exception as e:
            return {
                "success": False,
                "message": f"Error connecting to Google API: {str(e)}"
            }
    
    def _test_cohere_connection(self, config_data: Dict[str, Any]) -> Dict[str, Any]:
        """Test Cohere connection."""
        try:
            # In a real implementation, this would use the Cohere API
            # For now, simulate a successful connection
            return {
                "success": True,
                "message": "Successfully connected to Cohere API",
                "models": ["command", "command-light"]
            }
        except Exception as e:
            return {
                "success": False,
                "message": f"Error connecting to Cohere API: {str(e)}"
            }
    
    def _test_huggingface_connection(self, config_data: Dict[str, Any]) -> Dict[str, Any]:
        """Test HuggingFace connection."""
        try:
            # In a real implementation, this would use the HuggingFace API
            # For now, simulate a successful connection
            return {
                "success": True,
                "message": "Successfully connected to HuggingFace API",
                "models": ["mistral", "llama-2"]
            }
        except Exception as e:
            return {
                "success": False,
                "message": f"Error connecting to HuggingFace API: {str(e)}"
            }
    
    def _test_azure_openai_connection(self, config_data: Dict[str, Any]) -> Dict[str, Any]:
        """Test Azure OpenAI connection."""
        try:
            # In a real implementation, this would use the Azure OpenAI API
            # For now, simulate a successful connection
            return {
                "success": True,
                "message": "Successfully connected to Azure OpenAI API",
                "models": ["gpt-4", "gpt-3.5-turbo"]
            }
        except Exception as e:
            return {
                "success": False,
                "message": f"Error connecting to Azure OpenAI API: {str(e)}"
            }
    
    def _test_github_connection(self, config_data: Dict[str, Any]) -> Dict[str, Any]:
        """Test GitHub connection."""
        try:
            # In a real implementation, this would use the GitHub API
            # For now, simulate a successful connection
            return {
                "success": True,
                "message": "Successfully connected to GitHub API",
                "user": "toronto-ai-team-agent-user"
            }
        except Exception as e:
            return {
                "success": False,
                "message": f"Error connecting to GitHub API: {str(e)}"
            }
    
    def _test_jira_connection(self, config_data: Dict[str, Any]) -> Dict[str, Any]:
        """Test Jira connection."""
        try:
            # In a real implementation, this would use the Jira API
            # For now, simulate a successful connection
            return {
                "success": True,
                "message": "Successfully connected to Jira API",
                "projects": ["OPENMANUS", "TEAMAI"]
            }
        except Exception as e:
            return {
                "success": False,
                "message": f"Error connecting to Jira API: {str(e)}"
            }
    
    def _test_slack_connection(self, config_data: Dict[str, Any]) -> Dict[str, Any]:
        """Test Slack connection."""
        try:
            # In a real implementation, this would use the Slack API
            # For now, simulate a successful connection
            return {
                "success": True,
                "message": "Successfully connected to Slack API",
                "channels": ["general", "development"]
            }
        except Exception as e:
            return {
                "success": False,
                "message": f"Error connecting to Slack API: {str(e)}"
            }
    
    def _test_custom_connection(self, config_data: Dict[str, Any]) -> Dict[str, Any]:
        """Test custom connection."""
        try:
            # In a real implementation, this would use the custom API
            # For now, simulate a successful connection
            return {
                "success": True,
                "message": "Successfully connected to custom API",
                "endpoint": config_data.get("settings", {}).get("endpoint", "unknown")
            }
        except Exception as e:
            return {
                "success": False,
                "message": f"Error connecting to custom API: {str(e)}"
            }
    
    # Provider-specific client creation methods
    
    def _create_openai_client(self, config_data: Dict[str, Any]) -> Any:
        """Create OpenAI client."""
        # In a real implementation, this would create an OpenAI client
        # For now, return a simulated client
        return {
            "type": "openai",
            "api_key": self._decrypt_api_key(config_data.get("api_key")),
            "settings": config_data.get("settings", {})
        }
    
    def _create_anthropic_client(self, config_data: Dict[str, Any]) -> Any:
        """Create Anthropic client."""
        # In a real implementation, this would create an Anthropic client
        # For now, return a simulated client
        return {
            "type": "anthropic",
            "api_key": self._decrypt_api_key(config_data.get("api_key")),
            "settings": config_data.get("settings", {})
        }
    
    def _create_deepseek_client(self, config_data: Dict[str, Any]) -> Any:
        """Create DeepSeek client."""
        # In a real implementation, this would create a DeepSeek client
        # For now, return a simulated client
        return {
            "type": "deepseek",
            "api_key": self._decrypt_api_key(config_data.get("api_key")),
            "settings": config_data.get("settings", {})
        }
    
    def _create_google_client(self, config_data: Dict[str, Any]) -> Any:
        """Create Google client."""
        # In a real implementation, this would create a Google client
        # For now, return a simulated client
        return {
            "type": "google",
            "api_key": self._decrypt_api_key(config_data.get("api_key")),
            "settings": config_data.get("settings", {})
        }
    
    def _create_cohere_client(self, config_data: Dict[str, Any]) -> Any:
        """Create Cohere client."""
        # In a real implementation, this would create a Cohere client
        # For now, return a simulated client
        return {
            "type": "cohere",
            "api_key": self._decrypt_api_key(config_data.get("api_key")),
            "settings": config_data.get("settings", {})
        }
    
    def _create_huggingface_client(self, config_data: Dict[str, Any]) -> Any:
        """Create HuggingFace client."""
        # In a real implementation, this would create a HuggingFace client
        # For now, return a simulated client
        return {
            "type": "huggingface",
            "api_key": self._decrypt_api_key(config_data.get("api_key")),
            "settings": config_data.get("settings", {})
        }
    
    def _create_azure_openai_client(self, config_data: Dict[str, Any]) -> Any:
        """Create Azure OpenAI client."""
        # In a real implementation, this would create an Azure OpenAI client
        # For now, return a simulated client
        return {
            "type": "azure_openai",
            "api_key": self._decrypt_api_key(config_data.get("api_key")),
            "settings": config_data.get("settings", {})
        }
    
    def _create_github_client(self, config_data: Dict[str, Any]) -> Any:
        """Create GitHub client."""
        # In a real implementation, this would create a GitHub client
        # For now, return a simulated client
        return {
            "type": "github",
            "api_key": self._decrypt_api_key(config_data.get("api_key")),
            "settings": config_data.get("settings", {})
        }
    
    def _create_jira_client(self, config_data: Dict[str, Any]) -> Any:
        """Create Jira client."""
        # In a real implementation, this would create a Jira client
        # For now, return a simulated client
        return {
            "type": "jira",
            "api_key": self._decrypt_api_key(config_data.get("api_key")),
            "settings": config_data.get("settings", {})
        }
    
    def _create_slack_client(self, config_data: Dict[str, Any]) -> Any:
        """Create Slack client."""
        # In a real implementation, this would create a Slack client
        # For now, return a simulated client
        return {
            "type": "slack",
            "api_key": self._decrypt_api_key(config_data.get("api_key")),
            "settings": config_data.get("settings", {})
        }
    
    def _create_custom_client(self, config_data: Dict[str, Any]) -> Any:
        """Create custom client."""
        # In a real implementation, this would create a custom client
        # For now, return a simulated client
        return {
            "type": "custom",
            "api_key": self._decrypt_api_key(config_data.get("api_key")),
            "settings": config_data.get("settings", {})
        }
